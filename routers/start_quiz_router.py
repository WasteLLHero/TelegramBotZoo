import asyncio
from urllib.parse import quote_plus
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
import logging
from decouple import config
from async_requests import ArequestGetJson, ArequestPost
from aiogram.utils.keyboard import InlineKeyboardBuilder  
from aiogram.types import InlineKeyboardButton 
from helpers.simulate_typing import simulate_typing

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class QuizState(StatesGroup):
    data = State()  # –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
    answers = State()  # –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

start_quiz_router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
def generate_options_keyboard(options):
    keyboard_buttons = [InlineKeyboardButton(text=option, callback_data=option) for option in options]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons], row_width=2)
    return keyboard

@start_quiz_router.callback_query(F.data == "start_quiz")
async def start_quiz_message(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    typing_task = asyncio.create_task(simulate_typing(callback.message))
    data = await ArequestPost(f"{config('url')}/api/zoo/generate-quiz")

    await state.update_data(quiz_data=data)
    question = data[0]
    options = question["options"]
    keyboard = generate_options_keyboard(options)
    
    msg = await callback.message.edit_text(f"–ü–æ–µ—Ö–∞–ª–∏ üèéÔ∏èüí®, –í–æ–ø—Ä–æ—Å #{question['number']}: {question['question']}", reply_markup=keyboard)
    await state.update_data(message_for_edit = msg)
    typing_task.cancel()


@start_quiz_router.callback_query(F.data != "support")
async def handle_answer(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"callback_query = {callback_query.data}")
    current_data = await state.get_data()
    data = current_data.get("quiz_data", [])
    answers = current_data.get("answers", [])
    question_index = len(answers)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if question_index < len(data):
        selected_answer = callback_query.data
        question = data[question_index]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        answer = {
            "question": question["question"],
            "answer": selected_answer
        }
        answers.append(answer)
        await state.update_data(answers=answers)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if question_index + 1 < len(data):
            next_question = data[question_index + 1]
            message_for_edit = current_data["message_for_edit"]
            if message_for_edit:
                msg = await callback_query.message.edit_text(
                    f"–í–æ–ø—Ä–æ—Å #{next_question['number']}: {next_question['question']}",
                    reply_markup=generate_options_keyboard(next_question["options"])
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—â–µ –Ω–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                msg = await callback_query.message.answer(
                    f"–í–æ–ø—Ä–æ—Å #{next_question['number']}: {next_question['question']}",
                    reply_markup=generate_options_keyboard(next_question["options"])
                )
            await state.update_data(message_for_edit = msg)

            # await callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            answers_text = "\n".join([f"{ans['question']} - {ans['answer']}" for ans in answers])
            logger.info(f"\n\nanswers full - {answers}\n\n")
            await callback_query.message.edit_text(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã: \n{answers_text}")
            typing_task = asyncio.create_task(simulate_typing(callback_query.message))
            animal_response = await ArequestPost(f"{config('url')}/api/zoo/generate-animal-by-quiz", data={"answers": answers})
            typing_task.cancel()
            logger.info(f"{animal_response}")
            telegramUser = await ArequestGetJson(f"{config('url')}/api/zoo/telegram-user?telegramId={callback_query.from_user.id}")
            logger.info(f"telegramUser - {telegramUser}")
            final_response = {
                "tgId": callback_query.from_user.id,
                "telegramUser": telegramUser['id'],
                "answers": answers,
                "suggested_animal": animal_response["suggested_animal"],
                "reasoning": animal_response["reasoning"],
                "care_recommendations": animal_response["care_recommendations"]
            }
            quiz_result = await ArequestPost(f"{config('url')}/api/zoo/quiz-results/", json=final_response)
            logger.info(f"{quiz_result}")
            photo = await ArequestGetJson(f"https://api.unsplash.com/photos/random?query={animal_response['suggested_animal']}&client_id={config('unsplash_token')}")
            photo_url = photo['urls']['full']
            animal_result = animal_response['suggested_animal']
            habitat = animal_response['reasoning']['habitat_preference']
            activity = animal_response['reasoning']['activity_level']
            diet = animal_response['reasoning']['diet']
            social_life = animal_response['reasoning']['social_preference']

            # –¢–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
            share_text = f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_result}. –ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è: {habitat}, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity}, –ø–∏—Ç–∞–Ω–∏–µ: {diet}, –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {social_life}"
            encoded_text = quote_plus(share_text)
            vk_share_url = f"https://vk.com/share.php?url={photo_url}&title={encoded_text}"
            tg_share_url = f"https://t.me/share/url?url={photo_url}&text={encoded_text}"

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
            share_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –í–ö", url=vk_share_url),
                    InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –¢–ì", url=tg_share_url)
                ]
            ])

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            await callback_query.message.bot.send_photo(
                chat_id=callback_query.message.chat.id,
                photo=photo_url,
                caption=(
                    f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                    f"–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_result}.\n"
                    f"–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–±–∏—Ç–∞–Ω–∏—è: {habitat},\n"
                    f"—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity},\n"
                    f"–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –µ–¥–∞: {diet},\n"
                    f"–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {social_life}"
                ),
                reply_markup=share_keyboard
            )
            # await callback_query.message.answer(f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –∂–∏–≤–æ—Ç–Ω–æ–µ: {animal_response['suggested_animal']}.\n–ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –æ–±–∏—Ç–∞–Ω–∏—è: {animal_response['reasoning']['habitat_preference']},\n—É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {animal_response['reasoning']['activity_level']},\n–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –µ–¥–∞: {animal_response['reasoning']['diet']},\n–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {animal_response['reasoning']['social_preference']}")
            await callback_query.message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É: {animal_response['care_recommendations']['exercise']}, {animal_response['care_recommendations']['diet']}, {animal_response['care_recommendations']['housing']}, {animal_response['care_recommendations']['attention']}, {animal_response['care_recommendations']['grooming']}, {animal_response['care_recommendations']['health']}", reply_markup=InlineKeyboardBuilder().add(InlineKeyboardButton(
                text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!",  
                callback_data="start_quiz"  
            )).add(InlineKeyboardButton(text="–û–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",  
                callback_data="support")).as_markup())
